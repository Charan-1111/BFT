"use strict";
/*
 * Copyright 2020 IBM All Rights Reserved.
 *
 * SPDX-License-Identifier: Apache-2.0
 */
var __classPrivateFieldSet = (this && this.__classPrivateFieldSet) || function (receiver, state, value, kind, f) {
    if (kind === "m") throw new TypeError("Private method is not writable");
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a setter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot write private member to an object whose class did not declare it");
    return (kind === "a" ? f.call(receiver, value) : f ? f.value = value : state.set(receiver, value)), value;
};
var __classPrivateFieldGet = (this && this.__classPrivateFieldGet) || function (receiver, state, kind, f) {
    if (kind === "a" && !f) throw new TypeError("Private accessor was defined without a getter");
    if (typeof state === "function" ? receiver !== state || !f : !state.has(receiver)) throw new TypeError("Cannot read private member from an object whose class did not declare it");
    return kind === "m" ? f : kind === "a" ? f.call(receiver) : f ? f.value : state.get(receiver);
};
var _NetworkImpl_client, _NetworkImpl_signingIdentity, _NetworkImpl_channelName;
Object.defineProperty(exports, "__esModule", { value: true });
exports.NetworkImpl = void 0;
const chaincodeeventsbuilder_1 = require("./chaincodeeventsbuilder");
const contract_1 = require("./contract");
class NetworkImpl {
    constructor(options) {
        _NetworkImpl_client.set(this, void 0);
        _NetworkImpl_signingIdentity.set(this, void 0);
        _NetworkImpl_channelName.set(this, void 0);
        __classPrivateFieldSet(this, _NetworkImpl_client, options.client, "f");
        __classPrivateFieldSet(this, _NetworkImpl_signingIdentity, options.signingIdentity, "f");
        __classPrivateFieldSet(this, _NetworkImpl_channelName, options.channelName, "f");
    }
    getName() {
        return __classPrivateFieldGet(this, _NetworkImpl_channelName, "f");
    }
    getContract(chaincodeName, contractName) {
        return new contract_1.ContractImpl({
            client: __classPrivateFieldGet(this, _NetworkImpl_client, "f"),
            signingIdentity: __classPrivateFieldGet(this, _NetworkImpl_signingIdentity, "f"),
            channelName: __classPrivateFieldGet(this, _NetworkImpl_channelName, "f"),
            chaincodeName: chaincodeName,
            contractName,
        });
    }
    async getChaincodeEvents(chaincodeName, options) {
        return this.newChaincodeEventsRequest(chaincodeName, options).getEvents();
    }
    newChaincodeEventsRequest(chaincodeName, options = {}) {
        return new chaincodeeventsbuilder_1.ChaincodeEventsBuilder(Object.assign({}, options, {
            chaincodeName: chaincodeName,
            channelName: __classPrivateFieldGet(this, _NetworkImpl_channelName, "f"),
            client: __classPrivateFieldGet(this, _NetworkImpl_client, "f"),
            signingIdentity: __classPrivateFieldGet(this, _NetworkImpl_signingIdentity, "f"),
        })).build();
    }
}
exports.NetworkImpl = NetworkImpl;
_NetworkImpl_client = new WeakMap(), _NetworkImpl_signingIdentity = new WeakMap(), _NetworkImpl_channelName = new WeakMap();
//# sourceMappingURL=network.js.map