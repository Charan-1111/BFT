import { TxValidationCodeMap } from './protos/peer/transaction_pb';
/**
 * Enumeration of transaction status codes.
 */
export declare const StatusCode: Readonly<TxValidationCodeMap>;
export declare const StatusNames: Readonly<{
    readonly 0: "VALID";
    readonly 1: "NIL_ENVELOPE";
    readonly 2: "BAD_PAYLOAD";
    readonly 3: "BAD_COMMON_HEADER";
    readonly 4: "BAD_CREATOR_SIGNATURE";
    readonly 5: "INVALID_ENDORSER_TRANSACTION";
    readonly 6: "INVALID_CONFIG_TRANSACTION";
    readonly 7: "UNSUPPORTED_TX_PAYLOAD";
    readonly 8: "BAD_PROPOSAL_TXID";
    readonly 9: "DUPLICATE_TXID";
    readonly 10: "ENDORSEMENT_POLICY_FAILURE";
    readonly 11: "MVCC_READ_CONFLICT";
    readonly 12: "PHANTOM_READ_CONFLICT";
    readonly 13: "UNKNOWN_TX_TYPE";
    readonly 14: "TARGET_CHAIN_NOT_FOUND";
    readonly 15: "MARSHAL_TX_ERROR";
    readonly 16: "NIL_TXACTION";
    readonly 17: "EXPIRED_CHAINCODE";
    readonly 18: "CHAINCODE_VERSION_CONFLICT";
    readonly 19: "BAD_HEADER_EXTENSION";
    readonly 20: "BAD_CHANNEL_HEADER";
    readonly 21: "BAD_RESPONSE_PAYLOAD";
    readonly 22: "BAD_RWSET";
    readonly 23: "ILLEGAL_WRITESET";
    readonly 24: "INVALID_WRITESET";
    readonly 25: "INVALID_CHAINCODE";
    readonly 254: "NOT_VALIDATED";
    readonly 255: "INVALID_OTHER_REASON";
}>;
/**
 * Status of a transaction that is committed to the ledger.
 */
export interface Status {
    /**
     * Block number in which the transaction committed.
     */
    blockNumber: bigint;
    /**
     * Transaction validation status code. The value corresponds to one of the values enumerated by {@link StatusCode}.
     */
    code: TxValidationCodeMap[keyof TxValidationCodeMap];
    /**
     * `true` if the transaction committed successfully; otherwise `false`.
     */
    successful: boolean;
    /**
     * The ID of the transaction.
     */
    transactionId: string;
}
//# sourceMappingURL=status.d.ts.map